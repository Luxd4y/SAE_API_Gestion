// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAE_API_Gestion.Models.EntityFramework;

#nullable disable

namespace SAE_API_Gestion.Migrations
{
    [DbContext(typeof(GestionDBContext))]
    [Migration("20241224162239_SaeDbMigration")]
    partial class SaeDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Batiment", b =>
                {
                    b.Property<int>("BatimentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BatimentId"));

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("bat_imagedata");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bat_nom");

                    b.HasKey("BatimentId");

                    b.ToTable("t_e_batiment_bat");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Capteur", b =>
                {
                    b.Property<int>("CapteurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cap_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CapteurId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cap_description");

                    b.Property<decimal>("Hauteur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("cap_hauteur");

                    b.Property<byte[]>("Imagedata")
                        .HasColumnType("bytea")
                        .HasColumnName("cap_imagedata");

                    b.Property<decimal>("Largeur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("cap_largeur");

                    b.Property<decimal>("Longueur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("cap_longueur");

                    b.Property<int>("MarqueId")
                        .HasColumnType("integer")
                        .HasColumnName("mar_id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cap_nom");

                    b.Property<string>("Reference")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cap_reference");

                    b.HasKey("CapteurId");

                    b.HasIndex("MarqueId");

                    b.ToTable("t_e_capteur_cap");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.CapteurInstalle", b =>
                {
                    b.Property<int>("CapteurInstalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cin_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CapteurInstalleId"));

                    b.Property<int>("CapteurId")
                        .HasColumnType("integer")
                        .HasColumnName("cap_id");

                    b.Property<decimal>("PositionX")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("cin_posx");

                    b.Property<decimal>("PositionY")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("cin_posy");

                    b.Property<int>("SalleId")
                        .HasColumnType("integer")
                        .HasColumnName("sal_id");

                    b.Property<int>("SurfaceId")
                        .HasColumnType("integer")
                        .HasColumnName("sur_id");

                    b.HasKey("CapteurInstalleId");

                    b.HasIndex("CapteurId");

                    b.HasIndex("SalleId");

                    b.HasIndex("SurfaceId");

                    b.ToTable("t_e_capteurinstalle_cin");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Equipement", b =>
                {
                    b.Property<int>("EquipementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("equ_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EquipementId"));

                    b.Property<decimal>("Hauteur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("equ_hauteur");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("equ_imagedata");

                    b.Property<decimal>("Largeur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("equ_largeur");

                    b.Property<decimal>("Longueur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("equ_longueur");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("equ_nom");

                    b.Property<int>("TypeEquipementId")
                        .HasColumnType("integer")
                        .HasColumnName("teq_id");

                    b.HasKey("EquipementId");

                    b.HasIndex("TypeEquipementId");

                    b.ToTable("t_e_equipement_equ");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.EquipementInstalle", b =>
                {
                    b.Property<int>("EquipementInstalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ein_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EquipementInstalleId"));

                    b.Property<int>("EquipementId")
                        .HasColumnType("integer")
                        .HasColumnName("equ_id");

                    b.Property<decimal>("PositionX")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("ein_posx");

                    b.Property<decimal>("PositionY")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("ein_posy");

                    b.Property<int>("SalleId")
                        .HasColumnType("integer")
                        .HasColumnName("sal_id");

                    b.Property<int>("SurfaceId")
                        .HasColumnType("integer")
                        .HasColumnName("sur_id");

                    b.HasKey("EquipementInstalleId");

                    b.HasIndex("EquipementId");

                    b.HasIndex("SalleId");

                    b.HasIndex("SurfaceId");

                    b.ToTable("t_e_equipementinstalle_ein");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.MarqueCapteur", b =>
                {
                    b.Property<int>("MarqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mar_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarqueId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mar_nom");

                    b.HasKey("MarqueId");

                    b.ToTable("t_e_marquecapteur_mar");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.ParametreCapteur", b =>
                {
                    b.Property<int>("UniteMesurerId")
                        .HasColumnType("integer")
                        .HasColumnName("uni_id");

                    b.Property<int>("CapteurId")
                        .HasColumnType("integer")
                        .HasColumnName("cap_id");

                    b.Property<int?>("AcuPlagemax")
                        .HasColumnType("integer")
                        .HasColumnName("acu_plagemax");

                    b.Property<int?>("AcuPlagemin")
                        .HasColumnType("integer")
                        .HasColumnName("acu_plagemin");

                    b.Property<int?>("AcuPrecision")
                        .HasColumnType("integer")
                        .HasColumnName("acu_precision");

                    b.HasKey("UniteMesurerId", "CapteurId");

                    b.HasIndex("CapteurId");

                    b.ToTable("t_a_capteur_unitemesurer_acu");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.PositionSurface", b =>
                {
                    b.Property<int>("PositionSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pos_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PositionSurfaceId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pos_nom");

                    b.HasKey("PositionSurfaceId");

                    b.ToTable("t_e_positionsurface_pos");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Salle", b =>
                {
                    b.Property<int>("SalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalleId"));

                    b.Property<int>("BatimentId")
                        .HasColumnType("integer")
                        .HasColumnName("bat_id");

                    b.Property<int?>("Capacite")
                        .HasColumnType("integer")
                        .HasColumnName("sal_capacite");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("sal_imagedata");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sal_nom");

                    b.Property<int>("TypeSalleId")
                        .HasColumnType("integer")
                        .HasColumnName("typ_id");

                    b.HasKey("SalleId");

                    b.HasIndex("BatimentId");

                    b.HasIndex("TypeSalleId");

                    b.ToTable("t_e_salle_sal");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Surface", b =>
                {
                    b.Property<int>("SurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sur_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SurfaceId"));

                    b.Property<decimal>("Hauteur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("sur_hauteur");

                    b.Property<decimal>("Longueur")
                        .HasPrecision(100, 2)
                        .HasColumnType("numeric(100,2)")
                        .HasColumnName("sur_longueur");

                    b.Property<int>("PositionSurfaceId")
                        .HasColumnType("integer")
                        .HasColumnName("pos_id");

                    b.Property<int>("SalleId")
                        .HasColumnType("integer")
                        .HasColumnName("sal_id");

                    b.HasKey("SurfaceId");

                    b.HasIndex("PositionSurfaceId");

                    b.HasIndex("SalleId");

                    b.ToTable("t_e_surface_sur");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.TypeEquipement", b =>
                {
                    b.Property<int>("TypeEquipementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("teq_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeEquipementId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("teq_nom");

                    b.HasKey("TypeEquipementId");

                    b.ToTable("t_e_typeequipement_teq");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.TypeSalle", b =>
                {
                    b.Property<int>("TypeSalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("typ_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeSalleId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("typ_nom");

                    b.HasKey("TypeSalleId");

                    b.ToTable("t_e_typesalle_typ");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.UniteMesurer", b =>
                {
                    b.Property<int>("UniteMesurerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("uni_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniteMesurerId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("uni_nom");

                    b.Property<string>("Symbole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("uni_symbole");

                    b.HasKey("UniteMesurerId");

                    b.ToTable("t_e_unitemesurer_uni");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Capteur", b =>
                {
                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.MarqueCapteur", "Marque")
                        .WithMany("Capteurs")
                        .HasForeignKey("MarqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marque");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.CapteurInstalle", b =>
                {
                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Capteur", "Capteur")
                        .WithMany("CapteurInstalles")
                        .HasForeignKey("CapteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Salle", "Salle")
                        .WithMany("CapteurInstalles")
                        .HasForeignKey("SalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Surface", "Surface")
                        .WithMany("CapteurInstalles")
                        .HasForeignKey("SurfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capteur");

                    b.Navigation("Salle");

                    b.Navigation("Surface");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Equipement", b =>
                {
                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.TypeEquipement", "TypeEquipement")
                        .WithMany("Equipements")
                        .HasForeignKey("TypeEquipementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeEquipement");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.EquipementInstalle", b =>
                {
                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Equipement", "Equipement")
                        .WithMany("EquipementInstalles")
                        .HasForeignKey("EquipementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Salle", "Salle")
                        .WithMany("EquipementInstalles")
                        .HasForeignKey("SalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Surface", "Surface")
                        .WithMany("EquipementInstalles")
                        .HasForeignKey("SurfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipement");

                    b.Navigation("Salle");

                    b.Navigation("Surface");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.ParametreCapteur", b =>
                {
                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Capteur", "Capteur")
                        .WithMany("ParametreCapteur")
                        .HasForeignKey("CapteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.UniteMesurer", "UniteMesurer")
                        .WithMany("ParametreCapteur")
                        .HasForeignKey("UniteMesurerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capteur");

                    b.Navigation("UniteMesurer");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Salle", b =>
                {
                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Batiment", "Batiment")
                        .WithMany("Salles")
                        .HasForeignKey("BatimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.TypeSalle", "TypeSalle")
                        .WithMany("Salles")
                        .HasForeignKey("TypeSalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batiment");

                    b.Navigation("TypeSalle");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Surface", b =>
                {
                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.PositionSurface", "PositionSurface")
                        .WithMany("Surfaces")
                        .HasForeignKey("PositionSurfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAE_API_Gestion.Models.EntityFramework.Salle", "Salle")
                        .WithMany("Surfaces")
                        .HasForeignKey("SalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionSurface");

                    b.Navigation("Salle");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Batiment", b =>
                {
                    b.Navigation("Salles");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Capteur", b =>
                {
                    b.Navigation("CapteurInstalles");

                    b.Navigation("ParametreCapteur");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Equipement", b =>
                {
                    b.Navigation("EquipementInstalles");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.MarqueCapteur", b =>
                {
                    b.Navigation("Capteurs");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.PositionSurface", b =>
                {
                    b.Navigation("Surfaces");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Salle", b =>
                {
                    b.Navigation("CapteurInstalles");

                    b.Navigation("EquipementInstalles");

                    b.Navigation("Surfaces");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.Surface", b =>
                {
                    b.Navigation("CapteurInstalles");

                    b.Navigation("EquipementInstalles");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.TypeEquipement", b =>
                {
                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.TypeSalle", b =>
                {
                    b.Navigation("Salles");
                });

            modelBuilder.Entity("SAE_API_Gestion.Models.EntityFramework.UniteMesurer", b =>
                {
                    b.Navigation("ParametreCapteur");
                });
#pragma warning restore 612, 618
        }
    }
}
